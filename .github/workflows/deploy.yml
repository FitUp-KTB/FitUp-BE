name: CI/CD Pipeline for Backend

on:
  push:
    branches:
      - main
      - dev
      - feat/cicd*

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Set IMAGE_NAME
        id: set-image
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/fitup-backend" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/fitup-backend-dev" >> $GITHUB_ENV
          fi

      - name: Build Spring Boot Application
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          JAR_FILE=$(ls build/libs/*.jar | grep -v plain)
          docker build -t $IMAGE_NAME:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - name: Deploy to Remote Server via SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_JUMP_KEY }}" > ~/.ssh/jump_key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_vm_key
          chmod 600 ~/.ssh/jump_key ~/.ssh/private_vm_key

          # GitHub Actions 내에서 필요한 변수 계산
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/fitup-backend"
            CONTAINER_NAME="fitup-backend"
          else
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/fitup-backend-dev"
            CONTAINER_NAME="fitup-backend-dev"
          fi

          PROFILE="${GITHUB_REF##*/}"

          ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/jump_key -W %h:%p ${{ secrets.SSH_JUMP_USER }}@${{ secrets.SSH_JUMP_HOST }}" \
            -i ~/.ssh/private_vm_key \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF

            set -e

            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
            docker pull $IMAGE_NAME:latest

            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=$PROFILE \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e JWT_ACCESS_TOKEN_EXPIRATION="${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}" \
              -e JWT_REFRESH_TOKEN_EXPIRATION="${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}" \
              $IMAGE_NAME:latest

              docker image prune -af
          EOF
